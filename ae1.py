# -*- coding: utf-8 -*-
"""AE1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1teKgYcW0K0Q9GmftKjLNV_Rt2ioLGqw1
"""

from keras.datasets import mnist
import numpy as np
(train_images,__),(test_images,_)=mnist.load_data()
print(train_images.shape)
print(test_images.shape)

import matplotlib.pyplot as plt
plt.imshow(test_images[0].reshape(28,28))
plt.gray()

train_images=train_images.astype('float32')/255.
test_images=test_images.astype('float32')/255.

train_images=train_images.reshape((len(train_images),np.prod(train_images.shape[1:])))
test_images=test_images.reshape((len(test_images),np.prod(test_images.shape[1:])))
print(train_images.shape)
print(train_images.shape)

from keras.layers import Input,Dense
from keras.models import Model
encoding_dim=32
input_layer=Input(shape=(784,))
encoder_layer1=Dense(encoding_dim,activation='relu')(input_layer)
decoder_layer1=Dense(784,activation='sigmoid')(encoder_layer1)
autoencoder=Model(input_layer,decoder_layer1)
autoencoder.summary()

encoder=Model(input_layer,encoder_layer1)

encoded_input=Input(shape=(encoding_dim,))
decoder_layer=autoencoder.layers[-1]
decoder=Model(encoded_input,decoder_layer(encoded_input))

autoencoder.compile(optimizer='adam',loss='binary_crossentropy')

autoencoder.fit(train_images,train_images,
epochs=60,
batch_size=256,
shuffle=True,
validation_data=(test_images,test_images))

encoded_imgs=encoder.predict(test_images)
print(encoded_imgs.shape)

decoded_imgs=decoder.predict(encoded_imgs)
print(decoded_imgs.shape)

import matplotlib.pyplot as plt

n = 10  # How many digits we will display
plt.figure(figsize=(20, 4))
for i in range(n):
    # Display original
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(test_images[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Display reconstruction
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()